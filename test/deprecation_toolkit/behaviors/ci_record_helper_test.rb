# frozen_string_literal: true

require "test_helper"
require "tempfile"

module DeprecationToolkit
  module Behaviors
    class CIRecordHelperTest < ActiveSupport::TestCase
      setup do
        @tempfolder = Dir.mktmpdir
        @logfile_path = "#{@tempfolder}/ci_output.log"
        @previous_configuration = Configuration.behavior
        @previous_deprecation_path = Configuration.deprecation_path

        Configuration.behavior = CIRecordHelper
        Configuration.deprecation_path = @tempfolder
      end

      teardown do
        Configuration.behavior = @previous_configuration
        Configuration.deprecation_path = @previous_deprecation_path

        FileUtils.rm_rf(@tempfolder)
      end

      test "#trigger raise an error whom message is parsable by the `deprecation_toolkit:record_from_ci_output` task" do
        ci_output = +""
        ci_output << "random stuff generated by CI, this should be filtered out by the Rake Task\n"

        MyTest = Class.new(::Minitest::Test) do
          include TestDeprecator

          class << self
            def name
              "MyTest"
            end
          end

          def test_generate_deprecation
            deprecator.warn("Foo")
          end

          def test_generate_second_deprecation
            deprecator.warn("Bar")
          end
        end

        generate_raw_failure_output(ci_output)
        record_deprecation_files

        success_result = MyTest.new("test_generate_deprecation").run
        success_result2 = MyTest.new("test_generate_second_deprecation").run

        assert_predicate success_result, :passed?
        assert_predicate success_result2, :passed?
      end

      private

      def generate_raw_failure_output(ci_output)
        failure_result = MyTest.new("test_generate_deprecation").run
        failure_result2 = MyTest.new("test_generate_second_deprecation").run

        ci_output << failure_result.failures.first.message << "\n"
        ci_output << failure_result2.failures.first.message << "\n"

        File.write(@logfile_path, ci_output)
      end

      def record_deprecation_files
        ENV["FILEPATH"] = @logfile_path
        Rake::Task["deprecation_toolkit:record_from_ci_output"].invoke

        assert(File.exist?("#{@tempfolder}/my_test.yml"))
      ensure
        ENV.delete("FILEPATH")
      end
    end
  end
end
